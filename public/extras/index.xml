<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extra modules on Nodemailer</title>
    <link>https://nodemailer.com/extras/</link>
    <description>Recent content in Extra modules on Nodemailer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2017 11:25:35 +0200</lastBuildDate><atom:link href="https://nodemailer.com/extras/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SMTP Server</title>
      <link>https://nodemailer.com/extras/smtp-server/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/smtp-server/</guid>
      <description>Create SMTP and LMTP server instances on the fly. This is not a full-blown server application like Haraka but an easy way to add custom SMTP listeners to your app. This module is the successor for the server part of the (now deprecated) SMTP module simplesmtp. For matching SMTP client see smtp-connection.
This module does not make any email deliveries by itself. _smtp-server_ allows you to listen on ports 25/24/465/587 etc.</description>
    </item>
    
    <item>
      <title>SMTP Connection</title>
      <link>https://nodemailer.com/extras/smtp-connection/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/smtp-connection/</guid>
      <description>SMTP client module to connect to SMTP servers and send mail with it.
This module is the successor for the client part of the (now deprecated) SMTP module simplesmtp. For matching SMTP server see smtp-server.
Usage Step 1. Install Nodemailer with npm smtp-connection is exposed as a submodule of Nodemailer
npm install nodemailer --save Step 2. Require smtp-connection in your script const SMTPConnection = require(&amp;#34;nodemailer/lib/smtp-connection&amp;#34;); Step 3. Create SMTPConnection instance let connection = new SMTPConnection(options); Where</description>
    </item>
    
    <item>
      <title>Mailparser</title>
      <link>https://nodemailer.com/extras/mailparser/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/mailparser/</guid>
      <description>Advanced email parser for Node.js. Everything is handled as a stream which should make it able to parse even very large messages (100MB+) with relatively low overhead.
The module exposes two separate modes, a lower level MailParser class and simpleParser function. The latter is simpler to use (hence the name) but is less resource efficient as it buffers attachment contents in memory.
Install npm install mailparser --save simpleParser simpleParser is the easiest way to parse emails.</description>
    </item>
    
    <item>
      <title>Mailcomposer</title>
      <link>https://nodemailer.com/extras/mailcomposer/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/mailcomposer/</guid>
      <description>Generate RFC822 formatted e-mail messages that can be streamed to SMTP or file.
Usage Step 1. Install Nodemailer with npm mailcomposer is exposed as a submodule of Nodemailer
npm install nodemailer --save Step 2. Require mailcomposer in your script const MailComposer = require(&amp;#34;nodemailer/lib/mail-composer&amp;#34;); Step 3. Create a new MailComposer instance var mail = new MailComposer(mailOptions); Where mailOptions is an object that defines the components of the message, see below
API createReadStream To create a stream that outputs a raw rfc822 message from the defined input, use createReadStream()</description>
    </item>
    
    <item>
      <title>Node.js daemons</title>
      <link>https://nodemailer.com/extras/daemons/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/daemons/</guid>
      <description>DRAFT
 This tutorial shows how to set up Node.js applications as daemon services under Linux. Specifically the following would apply:
 The daemon application is a Node.js web app Daemon is set up as a SystemD services Node.js app is accessed as a Nginx virtual domain Updates are deployed using git   Even though this tutorial uses a web app as the service daemon, then the same approach can be used for deploying any kind of services.</description>
    </item>
    
  </channel>
</rss>
